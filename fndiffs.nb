tD[f_, vars_] := D[f, #] & /@ vars;
tmp[f_, {v_, v0_}] := f /. v -> v0;
tD[f_, vars_, ip_] := Fold[tmp, tD[f, vars], Transpose[{vars, ip}]] ;
eval[f_, vars_, p_] := Fold[tmp, f, Transpose[{vars, p}]] ;
(* this is for a surface, F(vars) = 0 *)
tangentPlane[f_, vars_, ip_] := 
  Reduce[tD[f, vars, ip] . Transpose[vars - ip] == 0];
pair[a_, b_] := {a, b};
hessHlp[f_ , {a_, b_}] := D[f, a, b];
(* use Det@ in front to compute the determinant *)
(* When the total derivative is 0:
	if Det(Hessian) > 0:
		Max if d^2/dx^2(x0) = < 0, min if > 0
	if Det(Hessian) < 0, saddle point
	if = 0, inconclusive. *) 
hessian[f_, vars_] := 
  Map[hessHlp[f, #] & , Outer[pair , vars, vars], {2}];
hessian[f_, vars_, p_] := eval[hessian[f, vars], vars, p];
jacobian[fs_, vars_] := tD[#, vars] & /@ Transpose[fs];
jacobian[fs_, vars_, p_] := eval[jacobian[f, vars], vars, p];
zip[xsSeq___] := With[{xs = {xsSeq}}, Transpose[xs]];
class[f_, vars_, p_] := 
  With[{dxxp = eval[D[f, {Part[vars, 1], 2}], vars, p], 
    hess = Det@hessian[f, vars, p]}, {p, eval[f, vars, p], hess, 
    If[hess > 0, If[dxxp < 0, "Max", "Min"], 
     If[hess == 0, "Indeterminate", "Saddle"]]}];
classCrit[f_, vars_] := 
  class[f, vars, #] & /@ (vars /. Solve[tD[f, vars] == 0]);
dropWhile[list_, test_] := Drop[list, LengthWhile[list, test]]; 
